var _ = require('underscore'),	dgUtils = require('dgUtils');exports.start = function start(config){	config = _.defaults(config, {		nbThreads: 1,		nbComps: 0,		nbEmps: 0,		nbCompEmps: 0	});	if(config.nbThreads < 1){		return {			status: false,			message: 'The number of threads is invalid!'		}	}	if(config.nbComps === 0 && config.nbEmps === 0 && config.nbCompEmps === 0){		return {			status: false,			message: 'Test invalid!'		}	}		exports.stop();	return dgUtils.start({		nbUsers: config.nbThreads,		config:{			companies: {				nb: config.nbComps,				employees: {					nb: config.nbCompEmps,					blobs: config.blobs,					asBinary: config.asBinary				}			},			employees: {				nb: config.nbEmps,				blobs: config.blobs,				asBinary: config.asBinary			}		}	});};exports.status = function status () {	return dgUtils.status();};exports.stop = function stop () {	return dgUtils.stop();};exports.remove = function remove () {	return dgUtils.remove();};exports.canStart = function canStart(){	var status = dgUtils.status(),		result = true;		for(var service in status){		var obj = status[service].result.data;		var config = status[service].result.config;				for(var attr in obj){			if(!obj[attr].finished){				var res = {result: false};				try{					res.config = {						nbThreads: config.nbUsers,						nbComps: config.config.companies.nb,						nbEmps: config.config.employees.nb,						nbCompEmps: config.config.companies.employees.nb,						blobs: config.config.companies.employees.blobs,						asBinary: config.config.companies.employees.asBinary					};										res.status = status;				}catch(e){					return res;				}								return res;			}		}	}		return result;}exports.services = function services(){	return dgUtils.services();}